name: Pull Request Message

on:
  pull_request:
    branches:
      - main  # Specify the branch where the merge operation should be performed
    types: [opened, synchronize]

jobs:
  echo_message:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up Git
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # Check out the pull request branch

      - name: Make API request
        id: myRequest
        uses: fjogeleit/http-request-action@main
        with:
          url: "https://e32c-45-118-75-87.ngrok-free.app/profile/${{ github.event.pull_request.user.login }}"
          preventFailureOnNoResponse: "true"
          ignoreStatusCodes: "404"
          method: "GET"
          output: "response.json"

      # Fail the job if the source is database
                # gh pr merge --admin --merge

      -name: extract status code
       id: status_code
       run: | 
          status_code=$(jq -r '.status' response.json)
          echo "::set-output name=status_code::$status_code"
      - name: If 404 pass the job
        if: steps.myRequest.outputs.response == ''
        run: |
         echo "response::=> ${{ steps.myRequest.outputs.response }}"
          echo "status code::=> ${{ steps.myRequest.outputs.status_code }}"
          echo "${{ github.event.pull_request.user.login }}'s Profile does not exist in the database. Can go ahead with auto merge." > message.txt
          gh pr comment ${{ github.event.pull_request.number }} --body-file=message.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      # If the API request returns a response, continue with the next steps
          # gh pr close --number ${{ github.event.workflow_run.payload.pull_requests[0].number }} --repo ${{ github.repository }}

      - name: If response received, continue with other steps
        if: steps.myRequest.outputs.response != ''
        run: |
          echo "response::=> ${{ steps.myRequest.outputs.response }}"
          echo "status code::=> ${{ steps.myRequest.outputs.status_code }}"
          echo "${{ github.event.pull_request.user.login }}'s Profile exists in the database. So closing the pr" > message.txt
          gh pr comment ${{ github.event.pull_request.number }} --body-file=message.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
